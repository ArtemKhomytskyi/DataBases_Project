IF EXISTS (SELECT * FROM sys.triggers WHERE name = 'CheckPlayerCountry')
DROP TRIGGER CheckPlayerCountry;
GO

CREATE TRIGGER CheckPlayerCountry
ON SUMMONEDS
INSTEAD OF INSERT
AS
BEGIN
  SET NOCOUNT ON;

  INSERT INTO SUMMONEDS (IDEVENTPLAYEROUT, IDPLAYER, IDMATCH, STARTING11)
  SELECT i.IDEVENTPLAYEROUT, i.IDPLAYER, i.IDMATCH, i.STARTING11
  FROM inserted i
  INNER JOIN PLAYER p ON i.IDPLAYER = p.IDPERSON
  INNER JOIN MATCH m ON i.IDMATCH = m.IDMATCH
  WHERE (m.IDHOMETEAM = p.IDCOUNTRY OR m.IDAWAYTEAM = p.IDCOUNTRY);
END;
GO

IF EXISTS (SELECT * FROM sys.triggers WHERE name = 'CheckRefereeCountryOnInsert')
DROP TRIGGER CheckRefereeCountryOnInsert;
GO

CREATE TRIGGER CheckRefereeCountryOnInsert
ON MATCH
INSTEAD OF INSERT
AS
BEGIN
  SET NOCOUNT ON;

  INSERT INTO MATCH (IDAWAYTEAM, IDTOURNAMENTPHASE, IDSTADIUM, IDHOMETEAM, IDREFEREE, STARTDATETIME, ADDEDTIME1STHALF, ADDEDTIME2NDHALF, EXTRATIMEADDEDTIME1STHALF, EXTRATIMEADDEDTIME2NDHALF, EXTRATIME, PENALTIES)
  SELECT i.IDAWAYTEAM, i.IDTOURNAMENTPHASE, i.IDSTADIUM, i.IDHOMETEAM, i.IDREFEREE, i.STARTDATETIME, i.ADDEDTIME1STHALF, i.ADDEDTIME2NDHALF, i.EXTRATIMEADDEDTIME1STHALF, i.EXTRATIMEADDEDTIME2NDHALF, i.EXTRATIME, i.PENALTIES
  FROM inserted i
  INNER JOIN REFEREE r ON i.IDREFEREE = r.IDPERSON
  WHERE NOT (i.IDHOMETEAM = r.IDCOUNTRY OR i.IDAWAYTEAM = r.IDCOUNTRY);
END;
GO

IF EXISTS (SELECT * FROM sys.triggers WHERE name = 'CheckRefereeCountryOnUpdate')
DROP TRIGGER CheckRefereeCountryOnUpdate;
GO

CREATE TRIGGER CheckRefereeCountryOnUpdate
ON MATCH
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;

  -- Temporarily store the old and new values
  DECLARE @OldMatchTable TABLE (IDMATCH numeric, IDREFEREE numeric, IDHOMETEAM numeric, IDAWAYTEAM numeric, IDTOURNAMENTPHASE numeric, IDSTADIUM numeric, STARTDATETIME datetime, ADDEDTIME1STHALF smallint, ADDEDTIME2NDHALF smallint, EXTRATIMEADDEDTIME1STHALF smallint, EXTRATIMEADDEDTIME2NDHALF smallint, EXTRATIME bit, PENALTIES bit);
  DECLARE @NewMatchTable TABLE (IDMATCH numeric, IDREFEREE numeric, IDHOMETEAM numeric, IDAWAYTEAM numeric, IDTOURNAMENTPHASE numeric, IDSTADIUM numeric, STARTDATETIME datetime, ADDEDTIME1STHALF smallint, ADDEDTIME2NDHALF smallint, EXTRATIMEADDEDTIME1STHALF smallint, EXTRATIMEADDEDTIME2NDHALF smallint, EXTRATIME bit, PENALTIES bit);

  -- Fill the temporary tables with old and new values
  INSERT INTO @OldMatchTable
  SELECT IDMATCH, IDREFEREE, IDHOMETEAM, IDAWAYTEAM, IDTOURNAMENTPHASE, IDSTADIUM, STARTDATETIME, ADDEDTIME1STHALF, ADDEDTIME2NDHALF, EXTRATIMEADDEDTIME1STHALF, EXTRATIMEADDEDTIME2NDHALF, EXTRATIME, PENALTIES FROM deleted;

  INSERT INTO @NewMatchTable
  SELECT IDMATCH, IDREFEREE, IDHOMETEAM, IDAWAYTEAM, IDTOURNAMENTPHASE, IDSTADIUM, STARTDATETIME, ADDEDTIME1STHALF, ADDEDTIME2NDHALF, EXTRATIMEADDEDTIME1STHALF, EXTRATIMEADDEDTIME2NDHALF, EXTRATIME, PENALTIES FROM inserted;

  -- Perform the update only if the new referee's country is not participating
  UPDATE m
  SET m.IDAWAYTEAM = n.IDAWAYTEAM, m.IDTOURNAMENTPHASE = n.IDTOURNAMENTPHASE, m.IDSTADIUM = n.IDSTADIUM, m.IDHOMETEAM = n.IDHOMETEAM, m.IDREFEREE = n.IDREFEREE, m.STARTDATETIME = n.STARTDATETIME, m.ADDEDTIME1STHALF = n.ADDEDTIME1STHALF, m.ADDEDTIME2NDHALF = n.ADDEDTIME2NDHALF, m.EXTRATIMEADDEDTIME1STHALF = n.EXTRATIMEADDEDTIME1STHALF, m.EXTRATIMEADDEDTIME2NDHALF = n.EXTRATIMEADDEDTIME2NDHALF, m.EXTRATIME = n.EXTRATIME, m.PENALTIES = n.PENALTIES
  FROM MATCH m
  INNER JOIN @OldMatchTable o ON m.IDMATCH = o.IDMATCH
  INNER JOIN @NewMatchTable n ON m.IDMATCH = n.IDMATCH
  INNER JOIN REFEREE r ON n.IDREFEREE = r.IDPERSON
  WHERE NOT (n.IDHOMETEAM = r.IDCOUNTRY OR n.IDAWAYTEAM = r.IDCOUNTRY);
END;
GO

IF EXISTS (SELECT * FROM sys.triggers WHERE name = 'CheckDoubleYellowCard')
DROP TRIGGER CheckDoubleYellowCard;
GO

CREATE TRIGGER CheckDoubleYellowCard
ON EVENTS
AFTER INSERT
AS
BEGIN
    SET NOCOUNT ON;

    -- Temporary table to store players who have received a second yellow card in the same match
    CREATE TABLE #TempRedCards (IDSUMMONEDMAINPLAYER numeric, MINUTE int, MATCHPART varchar(100));

    -- Iterate through each row in the inserted table
    DECLARE @PlayerID numeric, @MatchID numeric, @EventMinute int, @EventMatchPart varchar(100);
    DECLARE cur CURSOR FOR SELECT IDSUMMONEDMAINPLAYER, MINUTE, MATCHPART FROM inserted WHERE EVENTTYPE = 'Card' AND CARDTYPE = 'Yellow';
    OPEN cur;
    FETCH NEXT FROM cur INTO @PlayerID, @EventMinute, @EventMatchPart;
    WHILE @@FETCH_STATUS = 0
    BEGIN
        -- Check if this is the second yellow card for this player in the same match
        SELECT @MatchID = IDMATCH FROM SUMMONEDS WHERE IDSUMMONED = @PlayerID;
        IF (SELECT COUNT(*) FROM EVENTS WHERE IDSUMMONEDMAINPLAYER = @PlayerID AND EVENTTYPE = 'Card' AND CARDTYPE = 'Yellow' AND IDEVENT IN (SELECT IDEVENT FROM SUMMONEDS WHERE IDMATCH = @MatchID)) = 2
        BEGIN
            -- Insert into temporary table if not already existing
            IF NOT EXISTS (SELECT 1 FROM #TempRedCards WHERE IDSUMMONEDMAINPLAYER = @PlayerID)
            BEGIN
                INSERT INTO #TempRedCards (IDSUMMONEDMAINPLAYER, MINUTE, MATCHPART) VALUES (@PlayerID, @EventMinute, @EventMatchPart);
            END
        END
        FETCH NEXT FROM cur INTO @PlayerID, @EventMinute, @EventMatchPart;
    END
    CLOSE cur;
    DEALLOCATE cur;

    -- Insert red card events from the temporary table
    INSERT INTO EVENTS (IDSUMMONEDMAINPLAYER, MINUTE, MATCHPART, EVENTTYPE, CARDTYPE)
    SELECT IDSUMMONEDMAINPLAYER, MINUTE, MATCHPART, 'Card', 'Red' FROM #TempRedCards;

    -- Drop the temporary table
    DROP TABLE #TempRedCards;
END;
GO


IF EXISTS (SELECT * FROM sys.triggers WHERE name = 'CheckGoalScorer')
DROP TRIGGER CheckGoalScorer;
GO

CREATE TRIGGER CheckGoalScorer
ON EVENTS
INSTEAD OF INSERT
AS
BEGIN
  SET NOCOUNT ON;

  INSERT INTO EVENTS (IDSUMMONEDMAINPLAYER, MINUTE, MATCHPART, EVENTTYPE, ISPENALTY, ISOWNGOAL, CARDTYPE)
  SELECT i.IDSUMMONEDMAINPLAYER, i.MINUTE, i.MATCHPART, i.EVENTTYPE, i.ISPENALTY, i.ISOWNGOAL, i.CARDTYPE
  FROM inserted i
  INNER JOIN SUMMONEDS s ON i.IDSUMMONEDMAINPLAYER = s.IDSUMMONED
  WHERE i.EVENTTYPE = 'Goal'
    AND EXISTS (
      SELECT 1
      FROM SUMMONEDS s2
      WHERE s2.IDSUMMONED = i.IDSUMMONEDMAINPLAYER
        AND s2.IDMATCH = s.IDMATCH
        AND (s2.STARTING11 = 1 OR (s2.STARTING11 = 0 AND s2.IDEVENTPLAYEROUT IS NOT NULL))
    );
END;
GO

IF EXISTS (SELECT * FROM sys.triggers WHERE name = 'CheckPlayerReplacement')
DROP TRIGGER CheckPlayerReplacement;
GO

CREATE TRIGGER CheckPlayerReplacement
ON EVENTS
INSTEAD OF INSERT
AS
BEGIN
    SET NOCOUNT ON;

    INSERT INTO EVENTS (IDSUMMONEDMAINPLAYER, IDSUMMONEDPLAYEROUT, MINUTE, MATCHPART, EVENTTYPE, ISPENALTY, ISOWNGOAL, CARDTYPE)
    SELECT i.IDSUMMONEDMAINPLAYER, i.IDSUMMONEDPLAYEROUT, i.MINUTE, i.MATCHPART, i.EVENTTYPE, i.ISPENALTY, i.ISOWNGOAL, i.CARDTYPE
    FROM inserted i
    JOIN SUMMONEDS sIn ON i.IDSUMMONEDMAINPLAYER = sIn.IDSUMMONED
    JOIN SUMMONEDS sOut ON i.IDSUMMONEDPLAYEROUT = sOut.IDSUMMONED
    WHERE i.EVENTTYPE = 'Replacement'
    AND sOut.IDMATCH = sIn.IDMATCH -- Ensuring both players are in the same match
    AND (sOut.STARTING11 = 1 OR (sOut.STARTING11 = 0 AND sOut.IDEVENTPLAYEROUT IS NOT NULL)) -- Player out was on the field
    AND sIn.STARTING11 = 0 AND sIn.IDEVENTPLAYEROUT IS NULL -- Player in was not already on the field
    AND NOT EXISTS -- Ensuring the player in has not received a red card in the match
        (SELECT 1 FROM EVENTS e 
         WHERE e.IDSUMMONEDMAINPLAYER = sIn.IDSUMMONED
         AND e.EVENTTYPE = 'Card' AND e.CARDTYPE = 'Red');
END;

